// js/foxy/handlers.js

import { matchIntent } from "./intents.js";
import { services, randomReply, matchService, emoji } from "./responses.js";
import { lastInput, setLastInput, foxyMood }     from "./state.js";
import { addMessage, clearButtons, getReactions }              from "./dom.js";
import { renderServiceList, renderReactions, renderBookingOptions } from "./ui.js";

export function handleUserInput(message) {
  clearButtons();

  const input = message.trim();
  if (!input || input.toLowerCase() === lastInput) return;
  setLastInput(input.toLowerCase());

  addMessage(`–í—ã: ${message}`);

  // 1) –£—Å–ª—É–≥–∞?
  const svc = matchService(input);
  if (svc) {
    const text = services[svc.name];
    if (text) {
      addMessage(`${emoji(foxyMood)} ${text}`);
      renderBookingOptions();
    } else {
      addMessage(`${emoji(foxyMood)} –£–ø—Å‚Ä¶ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–µ –Ω–µ—Ç üò•`);
    }
    return;
  }

  // 2) –ò–Ω—Ç–µ–Ω—Ç
  const intent = matchIntent(input.toLowerCase());
  switch (intent) {
    case "design":
      addMessage(randomReply("design"), true);
      return;
          case "abilities":
      addMessage(`${emoji()} –Ø —É–º–µ—é –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–∏–∑–∞–π–Ω, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ —É—Å–ª—É–≥–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –º–∞–Ω–∏–∫—é—Ä.`);

      clearButtons();
      const reactions = getReactions();
      if (!reactions) return;

      const options = [
        { text: "üíÖ –ü—Ä–∞–π—Å",       handler: () => renderServiceList(handleUserInput) },
        { text: "üé® –î–∏–∑–∞–π–Ω",      handler: () => addMessage(randomReply("design"), true) },
        { text: "üî• –ß—Ç–æ –º–æ–¥–Ω–æ",   handler: () => showTrendyOptions() }
      ];

      const wrap = document.createElement("div");
      wrap.className = "flex gap-2 flex-wrap";

      options.forEach(({ text, handler }) => {
        const btn = document.createElement("button");
        btn.textContent = text;
        btn.className = "bg-pink-100 text-pink-700 px-3 py-1 rounded-xl text-sm";
        btn.onclick = handler;
        wrap.appendChild(btn);
      });

      reactions.appendChild(wrap);
      return;

    case "booking":
      renderBookingOptions();
      return;

    case "greeting":
    case "mood":
    case "smalltalkLite":
    case "thanks":
    case "bye":
    case "softWarning":
    case "styleTalk":
    case "about":
      addMessage(randomReply(intent));
      return;
    case "showServices":
    case "help":
      renderServiceList(handleUserInput);
      return;
    default:
      addMessage(randomReply("fallback"));
      renderServiceList(handleUserInput);
  }
}
function showTrendyOptions() {
  addMessage(`${emoji()} –°–µ–π—á–∞—Å –≤ –º–æ–¥–µ:`);

  const examples = [
    "üå∏ –ù—é–¥ —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º",
    "üíé –°—Ç—Ä–∞–∑—ã –Ω–∞ –æ–¥–Ω–æ–º –Ω–æ–≥—Ç–µ",
    "üñ§ –ß—ë—Ä–Ω—ã–π –≥–ª—è–Ω–µ—Ü + –º–∞—Ç–æ–≤—ã–π —Ç–æ–ø",
    "‚ú® ¬´–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑¬ª —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º",
    "üé® –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ—Ä–µ–Ω—á",
    "üßä –õ—ë–¥-—ç—Ñ—Ñ–µ–∫—Ç –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã"
  ];

  examples.forEach(style => {
    addMessage(`‚Ä¢ ${style}`);
  });

  addMessage("–•–æ—á–µ—à—å, –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç –ø–æ–¥ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòâ");
}
