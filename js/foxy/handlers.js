import { matchIntent } from "./intents.js";
import { services, randomReply, matchService } from "./responses.js";
import { emoji } from "./personality.js";
import { foxyMood, lastInput, setLastInput } from "./state.js";
import { addMessage, clearButtons } from "./dom.js";
import {
  renderServiceList,
  renderInlineConfirmButtons,
  renderBookingOptions
} from "./ui.js";

export function handleUserInput(message) {
  clearButtons();
  const input = message.trim().toLowerCase();

  // –û—Ç—Å–µ–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä
  if (input === lastInput.value) return;
  setLastInput(input);

  addMessage(`–í—ã: ${message}`);

  // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ª—É–≥—É
  const svc = matchService(input);
  if (svc) {
    const serviceText = services[svc.name];

    if (svc.exact && serviceText) {
      addMessage(`${emoji(foxyMood)} –í–æ—Ç, —á—Ç–æ –Ω–∞—à–ª–∞:`);
      addMessage(serviceText);
      renderBookingOptions();
    } else if (!svc.exact && serviceText) {
      addMessage(`${emoji(foxyMood)} –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É ¬´${svc.name}¬ª?`);
      renderInlineConfirmButtons(
        () => {
          addMessage("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üíñ");
          addMessage(serviceText);
          renderBookingOptions();
        },
        () => renderServiceList(handleUserInput)
      );
    } else {
      addMessage("–ù–µ –Ω–∞—à–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π —É—Å–ª—É–≥–µ üò•");
    }
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
  const intent = matchIntent(input);
  switch (intent) {
    case "design":
      addMessage(randomReply("design"), true);
      break;

    case "booking":
      renderBookingOptions();
      break;

    case "greeting":
    case "mood":
    case "smalltalk":
    case "smalltalkLite":
    case "thanks":
    case "bye":
    case "softWarning":
    case "styleTalk":
    case "about":
      addMessage(randomReply(intent));
      break;

    case "help":
    case "showServices":
      renderServiceList(handleUserInput);
      break;

    default:
      addMessage(randomReply("fallback"));
      renderServiceList(handleUserInput);
  }
}
